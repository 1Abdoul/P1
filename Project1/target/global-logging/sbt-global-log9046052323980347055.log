[0m[[0m[0mdebug[0m] [0m[0m> Exec(run, Some(97336603-14a5-4909-9c79-78935a292377), Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / run[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[31merror[0m] [0m[0morg.apache.spark.sql.AnalysisException: grouping expressions sequence is empty, and 'cyb1.`Year`' is not an aggregate function. Wrap '(count(cyb1.`Attack_type`) AS `count(Attack_type)`)' in windowing function(s) or wrap 'cyb1.`Year`' in first() (or first_value) if you don't care which value you get.;;[0m
[0m[[0m[31merror[0m] [0m[0mSort [Year#389 ASC NULLS FIRST], true[0m
[0m[[0m[31merror[0m] [0m[0m+- Aggregate [Year#389, Organisation#390, Number_of_users_affected#400, Attack_type#401, count(Attack_type#401) AS count(Attack_type)#412L][0m
[0m[[0m[31merror[0m] [0m[0m   +- SubqueryAlias cyb1[0m
[0m[[0m[31merror[0m] [0m[0m      +- HiveTableRelation `default`.`cyb1`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [Year#389, Organisation#390, Critical_Industry#391, Organisation_size#392, Sector#393, Country#394, Improper_network_segmentation#395, Inappropriate_remote_access#396, Absence_of_encryption#397, Restructuring_after_attack#398, Ransom_paid#399, Number_of_users_affected#400, Attack_type#401, Attacker#402, Attack_vector#403, Names_exposed#404, Address_leaked#405, PII_exposed#406, Credit_card_details_leaked#407, SSN_taxID_leaked#408, Subsequent_fraudulent_use_of_data#409, Summary#410][0m
[0m[[0m[31merror[0m] [0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.failAnalysis(CheckAnalysis.scala:41)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.Analyzer.failAnalysis(Analyzer.scala:92)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.org$apache$spark$sql$catalyst$analysis$CheckAnalysis$class$$anonfun$$checkValidAggregateExpression$1(CheckAnalysis.scala:183)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$9.apply(CheckAnalysis.scala:224)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$9.apply(CheckAnalysis.scala:224)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.immutable.List.foreach(List.scala:392)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:224)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:84)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:127)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:126)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:126)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.immutable.List.foreach(List.scala:392)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:126)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:84)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:92)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:105)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.QueryExecution.analyzed$lzycompute(QueryExecution.scala:57)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.QueryExecution.analyzed(QueryExecution.scala:55)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:47)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.Dataset$.ofRows(Dataset.scala:74)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:642)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:694)[0m
[0m[[0m[31merror[0m] [0m[0m	at P1$.insertCyberAttacks(P1.scala:148)[0m
[0m[[0m[31merror[0m] [0m[0m	at P1$.main(P1.scala:47)[0m
[0m[[0m[31merror[0m] [0m[0m	at P1.main(P1.scala)[0m
[0m[[0m[31merror[0m] [0m[0m	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[0m
[0m[[0m[31merror[0m] [0m[0m	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.lang.reflect.Method.invoke(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.invokeMain(Run.scala:143)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.execute$1(Run.scala:93)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.$anonfun$runWithLoader$5(Run.scala:120)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run$.executeSuccess(Run.scala:186)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.runWithLoader(Run.scala:120)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Defaults$.$anonfun$bgRunTask$6(Defaults.scala:1983)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Defaults$.$anonfun$termWrapper$2(Defaults.scala:1922)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.util.Try$.apply(Try.scala:213)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.internal.BackgroundThreadPool$BackgroundRunnable.run(DefaultBackgroundJobService.scala:369)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.lang.Thread.run(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m(Compile / [31mrun[0m) org.apache.spark.sql.AnalysisException: grouping expressions sequence is empty, and 'cyb1.`Year`' is not an aggregate function. Wrap '(count(cyb1.`Attack_type`) AS `count(Attack_type)`)' in windowing function(s) or wrap 'cyb1.`Year`' in first() (or first_value) if you don't care which value you get.;;[0m
[0m[[0m[31merror[0m] [0m[0mSort [Year#389 ASC NULLS FIRST], true[0m
[0m[[0m[31merror[0m] [0m[0m+- Aggregate [Year#389, Organisation#390, Number_of_users_affected#400, Attack_type#401, count(Attack_type#401) AS count(Attack_type)#412L][0m
[0m[[0m[31merror[0m] [0m[0m   +- SubqueryAlias cyb1[0m
[0m[[0m[31merror[0m] [0m[0m      +- HiveTableRelation `default`.`cyb1`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, [Year#389, Organisation#390, Critical_Industry#391, Organisation_size#392, Sector#393, Country#394, Improper_network_segmentation#395, Inappropriate_remote_access#396, Absence_of_encryption#397, Restructuring_after_attack#398, Ransom_paid#399, Number_of_users_affected#400, Attack_type#401, Attacker#402, Attack_vector#403, Names_exposed#404, Address_leaked#405, PII_exposed#406, Credit_card_details_leaked#407, SSN_taxID_leaked#408, Subsequent_fraudulent_use_of_data#409, Summary#410][0m
[0m[[0m[31merror[0m] [0m[0mTotal time: 35 s, completed Feb 2, 2022 10:55:54 AM[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
